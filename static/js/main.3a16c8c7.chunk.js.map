{"version":3,"sources":["components/Container/index.js","components/Photos/index.js","components/Status/index.js","components/Header/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","className","children","Photos","role","aria-label","style","backgroundImage","concat","image","onClick","handleClick","id","Status","state","message","renderMessage","_this","prevProps","newState","score","topScore","this","setState","Component","Header","components_Status","Game","data","shuffleDeck","sort","b","Math","random","resetDeck","resetData","map","item","Object","objectSpread","clicked","correctGuess","newData","newScore","newTopScore","max","wrongGuess","gameCardClick","guessedCorrectly","_this2","components_Header","components_Container","components_Photos","key","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a16c8c7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Container.css\";\n\n// STATELESS\nconst Container = props => \n    <main className=\"container\">\n        {/* passing in other components through children in Game.js */}\n        {props.children}\n    </main>;\n\nexport default Container;","import React from \"react\";\nimport \"./Photos.css\";\n\n// STATELESS\n\n// defines what to do/how to format with data.json in the game.js component\n// props.image becomes item.image in game.js because we define the new array as item in game.js\nconst Photos = props => (\n    <div\n        role=\"img\"\n        aria-label=\"click item\"\n        className={`gameCard`} \n        style={{ backgroundImage: `url(\"/${props.image}\")`}}\n        onClick={() => props.handleClick(props.id)}\n    /> \n);\n\nexport default Photos;","import React, {Component} from \"react\";\nimport \"./Status.css\";\n\n// STATEFUL \n\nclass Status extends Component {\n\n    state = {\n        message: \"\"\n    }\n\n    // function runs on every state change\n    // prevProps = props are header components that is equal to state\n    // you can access parents states\n    componentDidUpdate(prevProps) {\n\n      // will be passed into setState function\n      let newState = {}\n\n      // deconstruct score and topScore from the previous state\n      const {score, topScore} = prevProps\n\n      // change message if user guess correclty or incorrectly\n      if (score === 0 && topScore === 0) {\n        newState.message = \"\";\n      } else if (score !== 0 && topScore > 0) {\n        newState.message = \"correct\";\n      } else if (score === 12 && topScore === 12) {\n        newState.message = \"win\";\n      } else {\n        newState.message = \"incorrect\";\n      }\n\n      // set the state with the new message if the score changes, \n      // or the message and state message are not equal\n      if (score !== this.props.score || this.state.message !== newState.message) {\n        this.setState(newState);\n      }\n  \n    }\n\n    // change the display message based on the message state\n    renderMessage = () => {\n        switch (this.state.message) {\n        case \"win\":\n          return \"You Won!\";\n        case \"correct\":\n          return \"Correctomundo!\";\n        case \"incorrect\":\n          return \"Incorrectomundo!\";\n        default:\n          return \"Only click an artist once. Good luck!\";\n        }\n    };\n\n    render() {\n        return(\n          <li \n            id={`${this.state.message}`}\n          >\n            {this.renderMessage()}\n          </li>  \n        );\n    }\n}\n\nexport default Status;","import React from \"react\";\nimport \"./Header.css\";\nimport Status from \"../Status\";\n\nconst Header = props => (\n    <div className=\"header\">\n        <ul>\n            <li><h2>Artist Clicks</h2></li>\n            {/* Passing in score as a prop that is defined in STATUS COMPONENT */}\n            <Status score={props.score} topScore={props.topScore} />\n            <li id=\"score\">Score: {props.score} | Top Score: {props.topScore}</li>\n        </ul>\n        \n    </div>\n)\n\nexport default Header;","import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport Photos from \"../Photos\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\n// STATEFUL\n\n//allows you to access all functions that comes with react components for stateful components\nclass Game extends Component {\n\n    state = {\n        data,\n        score: 0,\n        topScore: 0,\n    };\n\n    // function gets called when the page loads\n    componentDidMount() {\n        // reorders the dataarray on state changes\n        this.setState({ data: this.shuffleDeck(this.state.data) });\n    }\n\n    // shuffle the imported data array in random order\n    shuffleDeck = data => {\n        let newData = data.sort(function(a, b){return 0.5 - Math.random()});\n        return newData;\n    };\n\n    // resets all the clicked properties to false\n    resetDeck = data => {\n        const resetData = data.map(item => ({ ...item, clicked: false }));\n        // console.log(data);\n        // console.log(resetData);\n        return this.shuffleDeck(resetData);\n      };\n\n    // checks to see if score is higher than the topscore then updates the state with the update array\n    correctGuess = newData => {\n        let newScore = this.state.score;\n        newScore++\n        let newTopScore = Math.max(newScore, this.state.topScore);\n\n        this.setState({\n            data: this.shuffleDeck(newData),\n            score: newScore,\n            topScore: newTopScore,\n        })\n    }\n\n    // restarts the game with fresh data\n    wrongGuess = newData => {\n        this.setState({\n            data: this.resetDeck(newData),\n            score: 0\n        })\n    }\n\n    // when a card is clicked, check if it has been clicked before,\n    // then update that cards clicked property\n    gameCardClick = id => {\n        let guessedCorrectly = false;\n        // newData will be the data array with updated clicked properties\n        //ITEM HERE IS THE PHOTO JSON IN DATA.JSON (DATA)\n        const newData = this.state.data.map(item => {\n          if (item.id === id) {\n            if (!item.clicked) {\n              item.clicked = true;\n              guessedCorrectly = true;\n            }\n          }\n          return item;     \n        });\n        // if guessedCorrectly = true, run the correctGuess function,\n        // else run the wrongGuess function\n        guessedCorrectly ? this.correctGuess(newData) : this.wrongGuess(newData);\n      };\n\n    render() {\n        return (\n            <div>\n                <Header score={this.state.score} topScore = {this.state.topScore} />\n                <Container>\n                    {\n                        this.state.data.map(item => (\n                            <div>\n                                <Photos\n                                    key={item.id}\n                                    id={item.id} \n                                    image={item.image}\n                                    clicked={item.clicked}\n                                    handleClick={this.gameCardClick}\n                                />      \n                            </div>  \n                        ))\n                    }\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport Game from \"./components/Game\" \n\nconst App = () => <Game/>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}